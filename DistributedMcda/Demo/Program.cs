using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using Demo.AdminServiceReference;
using Demo.ServiceReference;
using OperationStatus = Demo.ServiceReference.OperationStatus;

namespace Demo
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var client = new CalculatingServiceClient("WSHttpBinding_ICalculatingService"))
            {
                using (var adm = new AdministrationServiceClient("WSHttpBinding_IAdministrationService"))
                {
                    var et = SampleET();

                    var w = new double[,]
                        {
                            {0.12, 0.13, 0.05, 0.06, 0.04, 0.07, 0.04, 0.08, 0.12, 0.14, 0.04, 0.07, 0.04},
                            {1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1}
                        };

                    //  Promethee promethee = new Promethee();
                    var input = new List<KeyValuePair<string, double[][]>>();
                    input.Add(new KeyValuePair<string, double[][]>("weights", w.ToJagged()));
                    input.Add(new KeyValuePair<string, double[][]>("evaluationTable", et.ToJagged()));


                    var list = new List<OperationStatus>();
                    for (int i = 0; i < 150; ++i)
                    {
                        var res1 = client.Calculate("Promethee", input.ToArray());
                        list.Add(res1);
                        Console.WriteLine("Created  " + res1.Id);
                    }

                    for (int i = 5; i < 15; ++i)
                    {
                        var res1 = client.DeleteTask(list[i].Id);
                        Console.WriteLine("Delete  " + res1.Id + "  " + res1.Status);
                    }

                    for (int i = 5; i < 15; ++i)
                    {
                        var res1 = client.DeleteTask(list[i].Id);
                        Console.WriteLine("Delete  " + res1.Id + "  " + res1.Status);
                    }


                    foreach (var operationStatuse in list)
                    {
                        var res1 = client.GetResult(operationStatuse.Id);
                        Console.WriteLine("Result  " + "  " + res1.Status);
                    }


                    //Thread.Sleep(3000);
                    //var res = new CalculationResult() { Status = TaskStatus.InProgress };
                    //while (res.Status == TaskStatus.InProgress)
                    //{
                    //    res = client.GetResult(res1.Id);
                    //    Thread.Sleep(200);
                    //}
                    ////    Console.WriteLine("Result" + "  " + res1.Status);
                    //PrintArray(((double[][])res.Data).ToMultiD());
                    Thread.Sleep(3000);
                    var methods = client.GetAllMethods();
                    foreach (var methodDescription in methods)
                    {
                        Console.Write("Method: " + methodDescription.MethodName);
                        foreach (var paramseter in methodDescription.Parameters)
                        {
                            Console.Write(" | " + paramseter);
                        }
                        Console.WriteLine();
                    }

                    while (true)
                    {
                        var tasks = adm.GetAllTasks();
                        foreach (var keyValuePair in tasks)
                        {
                            PrintTaskPool(keyValuePair.Key, keyValuePair.Value);
                        }
                        Thread.Sleep(2000);
                        Console.WriteLine("----------------------------------------------------------------");
                    }
                    Console.ReadLine();
                }
            }
        }

        private static void PrintTaskPool(TaskPool taskPool, TaskInfo[] taskInfo)
        {
            Console.WriteLine("Pool = " + taskPool);
            foreach (var info in taskInfo)
            {
                Console.WriteLine(info.Id + " | " +  info.MethodName + " | " + info.Status + " | Created: " + info.CreationTime + " | Started: " + info.CalculationStartTime);
            }
        }

        static void PrintArray(double[,] w)
        {
            // Display the array elements:
            for (int i = 0; i < w.GetLength(0); i++)
            {
                Console.Write("[");
                for (int j = 0; j < w.GetLength(1); j++)
                {
                    Console.Write("[" + w[i, j] + "]");
                }
                Console.Write("]\n");

            }
        }

        private static double[,] SampleET()
        {
            return new double[,]
                {
                    {0.4, 0.875, 0.25, 0.833333333, 0.42, 0.4, 0.72, 1, 0.315, 0.888888889, 0.56, 0, 0.32},
                    {0.18, 0.888888889, 0.24, 0.75, 0.3, 0.4, 0.72, 1, 0.32, 0.875, 0.64, 0.222222222, 0.18},
                    {0.525, 0.533333333, 0.35, 0.8, 0.52, 0.18, 0.64, 1, 0.49, 0.857142857, 0.48, 0.5, 0.45},
                    {0.24, 0.625, 0.24, 1, 0.64, 0.4, 0.81, 0, 0, 1, 0, 1, 0},
                    {0.396, 0.777777778, 0.225, 1.75, 0.39, 0.45, 0.72, 1, 0.08, 0.75, 0.45, 0.125, 0.54},
                    {0.19552, 0.75, 0.48, 1.666666667, 0.3, 0.4, 0.72, 1, 0.0765, 0.470588235, 0.64, 0.210526316, 0.36},
                    {0.36, 0.833333333, 0.275, 1.2, 0.3, 0.45, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.2, 1, 0.33, 0.666666667, 0.26, 0.72, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.063, 1, 0.24, 1.428571429, 0.325, 0.48, 0.72, 1, 0.03456, 2.083333333, 0.468, 1.25, 0.09},
                    {0.08, 0.875, 0.3, 0.2, 0.25, 0.32, 0.64, 1, 0.0081, 1.851851852, 0.21, 0.5, 0.45},
                    {0.12, 1, 0.42, 1, 0.3, 0.45, 0.81, 1, 0.0522, 2.75862069, 0.325, 0.166666667, 0.45},
                    {0.18, 1, 0.48, 2, 0.44, 0.64, 0.64, 1, 0.3762, 0.606060606, 0.36, 0, 0.48},
                    {0.128, 1.0625, 0.16, 2, 0.52, 0.45, 0.81, 1, 0.052, 0.769230769, 0.76, 0.625, 0.63},
                    {0.198, 1.25, 0.45, 2, 0.35, 0.48, 0.72, 1, 0.1088, 0.661764706, 0.891, 0.666666667, 0.72},
                    {0.216, 0.75, 0.34, 0.5, 0.6, 0.64, 0.72, 1, 0.0285, 0.694736842, 0.26, 0.5, 0.64},
                    {0.063, 0.785714286, 0.4, 0, 0.26, 0.45, 0.64, 1, 0.035, 1.6, 0.176, 0.111111111, 0.27},
                    {0.048, 0.8125, 0.36, 0.5, 0.27, 0.63, 0.81, 1, 0.108, 1.5, 0.35, 0.202020202, 0.4},
                    {0.04, 1.125, 0.64, 0.4, 0.225, 0.4, 0.64, 0, 0, 1, 0, 1, 0},
                    {0.063, 0.888888889, 0.54, 0.8, 0.35, 0.48, 0.72, 1, 0.066, 0.909090909, 0.475, 0.340909091, 0.45},
                    {0.072, 0.875, 0.56, 1, 0.28, 0.72, 0.64, 1, 0.15, 0.5, 0.52, 0.933333333, 0.54},
                    {0.09, 1.166666667, 0.525, 0.75, 0.48, 0.63, 0.81, 1, 0.0975, 0.615384615, 0.405, 0.769230769, 0.36},
                    {0.672, 0.75, 0.42, 1.111111111, 0.64, 0.64, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.091, 0.857142857, 0.64, 0.5, 0.63, 0.48, 0.81, 1, 0.1512, 1.333333333, 0.72, 0, 0.595},
                    {0.128, 0.75, 0.405, 0, 0.57, 0.45, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.12, 0.625, 0.44, 0, 0.24, 0.72, 0.72, 1, 0.2688, 0.875, 0.72, 0.4, 0.26},
                    {0.117, 0.777777778, 0.52, 0.571428571, 0.56, 0.32, 0.64, 1, 0.17, 0.705882353, 0.18, 0, 0.544},
                    {0.2, 0.9375, 0.36, 1.333333333, 0.27, 0.16, 0.72, 1, 0.195, 1.384615385, 0.64, 0.2, 0.45},
                    {0.2664, 1.416666667, 0.52, 0.181818182, 0.44, 0.64, 0.64, 1, 0.0444, 0.540540541, 0.3, 0.4, 0.24},
                    {0.04, 1, 0.25, 0.909090909, 0.455, 0.45, 0.64, 1, 0.0225, 2.4, 0.56, 0.588235294, 0.175},
                    {0.0448, 0.857142857, 0.14, 0.6, 0.52, 0.54, 0.64, 1, 0.0845, 0.769230769, 0.24, 0.795454545, 0.272},
                    {0.072, 0.75, 0.52, 0.2, 0.36, 0.64, 0.64, 1, 0.0396, 1.818181818, 0.64, 1.428571429, 0.325},
                    {0.513, 0.888888889, 0.225, 0.285714286, 0.48, 0.4, 0.72, 1, 0.185, 1.081081081, 0.72, 0.769230769,0.544},
                    {0.04, 0.875, 0.22, 0.4, 0.28, 0.45, 0.72, 1, 0.612, 0.588235294, 0.63, 1.2, 0.475},
                    {0.765, 0.705882353, 0.275, 0.833333333, 0.42, 0.72, 0.72, 1, 0.225, 0.666666667, 0.64, 0.404040404,0.495},
                    {0.2625, 1.2, 0.39, 0.2, 0.52, 0.72, 0.81, 1, 0.165, 0.727272727, 0.54, 1.076923077, 0.49},
                    {0.333, 1.066666667, 0.36, 0, 0.3, 0.64, 0.72, 1, 0.455, 0.615384615, 0.81, 0.307692308, 0.686},
                    {
                        0.595, 0.941176471, 0.405, 0.363636364, 0.36, 0.64, 0.72, 1, 0.0504, 1.555555556, 0.72, 0.153846154
                        , 0.385
                    },
                    {0.296, 0.75, 0.44, 1.111111111, 0.56, 0.64, 0.64, 1, 0.12, 0.833333333, 0.4, 0.15625, 0.26},
                    {0.2, 0.875, 0.64, 0, 0.54, 0.72, 0.81, 1, 0.0728, 0.892857143, 0.9, 0, 0.325},
                    {
                        0.322, 1.142857143, 0.34, 0.666666667, 0.64, 0.72, 0.81, 1, 0.0325, 0.615384615, 0.72, 0.105263158,
                        0.11
                    },
                    {0.2, 0.75, 0.76, 0, 0.15, 0.72, 0.81, 1, 0.0276, 0.724637681, 0.63, 0, 0.36},
                    {0.104, 1, 0.48, 0.166666667, 0.44, 0.27, 0.64, 1, 0.1568, 0.75, 0.4, 0.105263158, 0.08},
                    {
                        0.45, 0.888888889, 0.315, 0.266666667, 0.21, 0.27, 0.63, 1, 0.63, 0.777777778, 0.36, 0.105263158,
                        0.04
                    },
                    {0.32, 0.75, 0.36, 0.666666667, 0.315, 0.72, 0.72, 1, 0.28, 1.142857143, 0.64, 0.111111111, 0.48},
                    {0.776, 1, 0.52, 0.625, 0.4, 0.63, 0.81, 1, 0.36, 0.666666667, 0.36, 0, 0.704},
                    {0.399, 1.142857143, 0.585, 0.461538462, 0.35, 0.54, 0.72, 1, 0.016, 1.125, 0.6, 0.111111111, 0.32},
                    {0.072, 0.875, 0.52, 0.5, 0.44, 0.54, 0.45, 1, 0.27, 0.444444444, 0.72, 0.111111111, 0.24},
                    {0.24, 0.75, 0.4, 1, 0.39, 0.45, 0.63, 1, 0.36, 0.444444444, 0.99, 0.111111111, 0.08},
                    {0.504, 0.666666667, 0.48, 1.555555556, 0.54, 0.64, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.512, 0.875, 0.16, 0.222222222, 0.36, 0.48, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.2528, 0.625, 0.48, 0.833333333, 0.44, 0.4, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.333, 0.666666667, 0.32, 0, 0.36, 0.48, 0.81, 1, 0.36, 0.444444444, 0.06, 0, 0.36},
                    {0.864, 0.444444444, 0.891, 0, 0.72, 0.72, 0.765, 1, 0.882, 0.5, 0.72, 0.111111111, 0.72},
                    {
                        0.2436, 1.166666667, 0.36, 0.363636364, 0.4, 0.56, 0.72, 1, 0.45, 0.444444444, 0.9, 0.111111111,
                        0.45
                    },
                    {0.278, 1.2, 0.2, 0.461538462, 0.495, 0.45, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.15096, 1.333333333, 0.44, 0.222222222, 0.4, 0.16, 0.72, 0, 0, 1, 0, 1, 0},
                    {0.40086, 0.823529412, 0.33, 0.571428571, 0.18, 0.16, 0.72, 1, 0.25, 0.6, 0.44, 0, 0.45},
                    {0.675, 0.8, 0.48, 1.6, 0.42, 0.4, 0.81, 1, 0.0816, 0.666666667, 0.585, 0.125, 0.36},
                    {0.1105, 0.769230769, 0.48, 1.2, 0.68, 0.45, 0.72, 1, 0.18, 0.666666667, 0.63, 0.222222222, 0.32},
                    {0.0425, 1, 0.48, 1.111111111, 0.39, 0.27, 0.81, 1, 0.24, 0.5, 0.72, 0.444444444, 0.4},
                    {0.03852, 1.2, 0.32, 0.533333333, 0.81, 0.18, 0.72, 1, 0.45, 0.555555556, 0.72, 0.333333333, 0.32},
                    {
                        0.0612, 0.882352941, 0.24, 0.461538462, 0.4, 0.16, 0.72, 1, 0.54, 0.444444444, 0.81, 0.111111111,
                        0.56
                    },
                    {
                        0.1045, 1.454545455, 0.4, 1.076923077, 0.64, 0.4, 0.81, 1, 0.162, 0.444444444, 0.72, 0.222222222,
                        0.64
                    }
                };
        }
    }
}
